#define Myclass_cxx
#include "Myclass.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <math.h>
#include <string>
#include <strstream>
#include <iostream>
#include "TFile.h"
#include "TTree.h"
#include <fstream>
#include <list>
#include <vector>
#include <iterator>

using std::vector;

//These variables are used in the calculations                              
float Dib, Dij, Rij, deltaphi, deltaeta, Dijmin, Dibmin;

//This value can be changed easily and it denotes the size of the cones     
float Rrr = .4;

//Set Speed of light for Energy Calc                                                    
const float csq = pow(299792458, 2);

//Set Pi for Phi Wrap                                                                   
const double PI = 4 * atan(1);

//Function for Phi Wrap Soln                                                                                     
float PhiWrap( float val )
{
  float output;
  if( val > PI)
    output = ((2 * PI) - val);
  else
    output = val;
  return output;
}

//Function to find distance between particles                                           
float Distance_P (float aphi, float bphi, float ceta, float deta, float ept, float fpt)
{
  deltaphi = PhiWrap (aphi - bphi) ;
  deltaeta = ceta - deta;
  Rij = hypot( deltaphi, deltaeta);
  Dij = min( pow( ept, -2), pow( fpt, -2));
  Dij = Dij * pow( ( Rij / Rrr), 2);
  return Dij;
}

//Function for Beam Distance                                                            
float Distance_J (float gpt)
{
  Dib = pow( gpt, -2);
  return Dib;
}

//Declare a struct (P) to hold arrays which will hold all of the values. The object particle of type P can acess all of these values                                           

struct JVN_particle
{
  float pt;
  float phi;
  float eta;
  float mass;
  float energy;
};

JVN_particle item;

vector <JVN_particle> Particles;
vector <JVN_particle> Jets;

//Create index variables for vector                                                             
int it, jt, minindex_i, minindex_j, minindex_iB;

//Create Instance Variables                                                                     
float px, py, pz, newphi, neweta, newmass, newtheta, totalpm, newpT;

void Myclass::Loop()
{

//   In a ROOT session, you can do:
//      Root > .L Myclass.C
//      Root > Myclass t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch

  //Create Canvas
  TCanvas *c1 = new TCanvas("c1", "demo", 200, 10, 700, 500);
  c1 -> SetFillColor(42);

  TH1F* histo1 = new TH1F("histo1", "Number of Jets", 100, 0, 200);
  histo1 -> SetMarkerStyle(21);

  if (fChain == 0) 
    return;

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry < nentries; jentry++) 
     {
      Long64_t ientry = LoadTree(jentry);
      {
	std::cout<< "jentry = " << jentry << std::endl;
	if (ientry < 0) 
	  break;
	nb = fChain->GetEntry(jentry);   
	nbytes += nb;
      }
      // if (Cut(ientry) < 0) continue;

      int numentry = pt->size();
      
      //Fill the array "particles" with the values from the vectors                             
      //Check pointer to array syntax for accesing element                                      
      for (int wh = 0; wh < numentry - 1; wh++)
        {
          item.pt = (*pt)[wh];
          item.phi = (*phi)[wh];
          item.eta = (*eta)[wh];
          item.mass = (*mass)[wh];
          item.energy = (*mass)[wh] * csq;
          Particles.push_back( item );
	  //	  std::cout<< "Particle pt = " << Particles.back().pt << std::endl;
        }
      
      //This is to make sure that the first value checked is assigned to the smallest           
      Dijmin = 100000;
      Dibmin = 100000;

      int icount = 0;
      while ( (!Particles.empty()) || icount > 10000 ) //Stop condition                                             
	{
	  std::cout<< "Particles size = " << Particles.size() << std::endl;
	  std::cout<< "icount = " << icount <<std::endl;
	  icount ++;
	  for( it = 0; it < Particles.size(); it++)
	    {
	      //	      std::cout<< "it = " << it << std::endl;
	      
	      for (jt = it + 1; jt < Particles.size(); jt++)
		{
  
		  Dij = Distance_P( Particles[it].phi, Particles[jt].phi, Particles[it].eta, Particles[jt].eta, Particles[it].pt, Particles[jt].pt );
		  //std::cout<< "Dij = " << Dij << " Dijmin = " << Dijmin << "i particle = " << it << " and j particle = " << jt <<std::endl;
		  if (Dij < Dijmin) //Determine if this is the smallest so far                 
		    {
		      Dijmin = Dij;
		      minindex_i = it;
		      minindex_j = jt;
		    }// if (Dij		  
		}//for ( jt = it
	      //std::cout << "For particle " << it << " the closest particle pair is " << minindex_i <<" " << minindex_j <<std::endl;
	      Dib = Distance_J( Particles[it].pt );
	      if (Dib < Dibmin)
		{
		  Dibmin = Dib;
		  minindex_iB = it; //Save the particle so it can be removed later                                                                      
		}//if (Dib <  
	    }// for (it = 0
      //If the smallest is a beam, add to beam list and remove from particle list          
      if (Dibmin < Dijmin)
	{
	  //std::cout<<"closest particle is beam and it is " << minindex_iB << std::endl;
	  Jets.push_back( Particles[minindex_iB] );
	  Particles.erase( Particles.begin() + minindex_iB );
	  //std::cout<<"Particle Size = " << Particles.size()<<std::endl; 
	}

      //If the smallest is not a beam, add momenta, add to list, and remove other two particles
      else
	{
	  std::cout<< "closest particles are" << minindex_j << " and " << minindex_i <<std::endl;
	  //ADDING MOMENTUM                                                                                                                             

	  //Adds the components of momentum in the x, y, and z directions                               
	  px = ( ( (Particles[minindex_i].pt * cos((Particles[minindex_j].phi) ) ) + (Particles[minindex_j].pt * cos(Particles[minindex_j].phi) ) ) );
	  py = ( ( (Particles[minindex_i].pt * sin((Particles[minindex_i].phi) ) ) + (Particles[minindex_j].pt * sin( Particles[minindex_j].phi) ) ) );
	  pz = ( ( (Particles[minindex_i].pt * sinh(Particles[minindex_i].eta) ) ) + (Particles[minindex_i].pt * sinh(Particles[minindex_j].eta) ) );

	  //Calculate new values for new paricle                                                                                                        
	  newpT = hypot(px, py);
	  totalpm = sqrt((px * px) + (py * py) + (pz * pz));
	  newtheta = asin( newpT / totalpm);
	  neweta = -log( tan( newtheta/ 2));
	  newphi = acos( px / (totalpm * sin(newtheta)));
	  //Add energies not mass                                                                                                                       
	  newmass = ( ( Particles[minindex_i].energy + Particles[minindex_j].energy ) / csq);
	  
	  //Build New Struct with all new values                                                                                                        
	  item.pt = newpT;
	  item.eta = neweta;
	  item.phi = newphi;
	  item.mass = newmass;
	  item.energy = (newmass * csq);
	  
	  //Remove the Particles and add the new one
	  if ( minindex_j < minindex_i )
	    {
	      Particles.erase( Particles.begin() + (minindex_i) );
	      Particles.erase( Particles.begin() + (minindex_j) );
	    }
	  else
	    {
	      Particles.erase( Particles.begin() + (minindex_j) );
	      Particles.erase( Particles.begin() + (minindex_i) );
	    }
	  std::cout<<"Particle Size = " << Particles.size()<<std::endl;
	  Particles.push_back( item );
	}
      Dijmin = 100000;
      Dibmin = 100000;
      minindex_j = 0;
      minindex_i = 0;
	}//while loop
      histo1 -> Fill( Jets.size() );
     }//for (jentry
   histo1 -> Draw("");
   c1 -> SaveAs("c1.gif");
}//Void Loop()
