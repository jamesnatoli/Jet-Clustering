#define JetCLuster_cxx
#include "JetCLuster.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <math.h>

void JetCLuster::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L JetCLuster.C
//      Root > JetCLuster t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;
   TH1F* histo1 = new TH1F("histo1", "Number of Jets", 100, 0, 200);

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry < nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   
      nbytes += nb;
      // if (Cut(ientry) < 0) continue;
   }
}  

   void JetCLuster::Algorithm()
   {
     Long64_t nentries = fChain->GetEntriesFast();
     TH1F* histo1 = new TH1F("histo1", "Number of Jets", 100, 0, 200);
     TH1F* histo2 = new TH1F("histo2", "Test for pT", 100, 0, 200);
     Long64_t Dij = 0;
     Long64_t Dib = 0;
     Long64_t Rij = 0;
     Long64_t Rrr = .4;
     for (Long64_t ispot = 0; ispot < nentries ; ispot++)
       {
    	 //for (Long64_t jspot = ispot + 1; jspot < nentries; jspot++)
	   {
	     cout<<pt[ispot]<<endl;
	     //histo2->Fill(pt[ispot]);
	     //Attempt to solve phi wrap problem
	     //if ( phi[jspot] > 180)
	     //{
	     //	 int temp = phi[jspot] - 360;
	     //	 phi.assign (jspot, phi);
	     //}

	     //Anti -kT algorithm
	     //Dib = pow( pt[jspot], -2);
	     //Rij = hypot( (phi[jspot] - phi[jspot]), (eta[jspot] - eta[ispot]) );
	     //Dij = min( pow( pt[jspot], -2), pow( pt[ispot], -2)) * ( pow( (Rij/R), 2));
	     if ( min( Dij, Dib) == Dij)
	       {
	       }
	   }
       }
   }
